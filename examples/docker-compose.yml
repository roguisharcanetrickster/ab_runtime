# Note: If using ab-cli installer this file will get overwritten
volumes:
  files:
  mysql_data:
  redis_data:
  nginx_logs:
  # clamav:

networks:
  default:
    attachable: true

services:

  #nginx setup
  web:
    image: docker.io/digiserve/ab-web:$AB_WEB_VERSION
    hostname: web
    volumes:
      - files:/data
      - nginx_logs:/var/log/nginx/
    depends_on:
      - api_sails
  #/nginx


  #db: use Maria DB as our backend DB
  db:
    image: docker.io/digiserve/ab-db:$AB_DB_VERSION
    hostname: db
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_PASSWORD
    volumes:
      # - mysql_config:/etc/mysql/conf.d
      - mysql_data:/var/lib/mysql
      # - mysql_key:/key
    # on windows: use this command. (be sure to clear out mysql/data folder)
    # command: mysqld --innodb-flush-method=littlesync --innodb-use-native-aio=OFF --log_bin=ON
    ######
    # when there is a problem with : Error: ER_CRASHED_ON_USAGE: Table 'AAAAAA' is marked as crashed and should be repaired
    # this can happen with the alter table algorithm: try the safest(and slowest) COPY
    # command: ["mysqld", "--alter-algorithm=copy"]
  #/db


  #redis: use redis to allow cote services to find each other across a swarm
  redis:
    image: docker.io/redis
    ## NOTE: don't expose the service to the outside for security:
    ## if you do expose it, then set a password.
    hostname: redis
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
  #/redis


  #api_sails: our API end point
  api_sails:
    image: docker.io/digiserve/ab-api-sails:$AB_API_SAILS_VERSION
    # workaround for SELinux bind mount issue (for podman only)
    # security_opt:
    #   label: disable
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - NODE_ENV
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - CAS_ENABLED
      - CAS_BASE_URL
      - CAS_UUID_KEY
      - SITE_URL
      - OKTA_ENABLED
      - OKTA_DOMAIN
      - OKTA_CLIENT_ID
      - OKTA_CLIENT_SECRET
      # - FILE_PROCESSOR_PATH
      # - FILE_PROCESSOR_UPLOAD_DIR
      # - FILE_PROCESSOR_MAXBYTES
      - RELAY_ENABLE
      - RELAY_SERVER_TOKEN
      - SAILS_SESSION_SECRET
    hostname: api_sails
    volumes:
      - type: bind
        source: ./logs/appbuilder/
        target: /var/log/appbuilder/
      - files:/data
      - nginx_logs:/var/log/nginx/
    depends_on:
      - redis
    # command: [ "node", "--inspect=0.0.0.0:9229", "app.js" ]
  #/api_sails


  #appbuilder: (AppBuilder) A multi-tenant aware service to process our AppBuilder requests.
  appbuilder:
    image: docker.io/digiserve/ab-appbuilder:$AB_APPBUILDER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - APPBUILDER_ENABLE
      - CIRCUITBREAKER_TIMEOUT
      - CIRCUITBREAKER_THRESHHOLD
      - CIRCUITBREAKER_RESET
    hostname: appbuilder
    depends_on:
      - redis
    # command: [ "node", "--inspect=0.0.0.0:9229", "app.js" ]
  #/appbuilder



  # custom_reports: A microservice for managing custom reports
  custom_reports:
    image: docker.io/digiserve/ab-custom-reports:$AB_CUSTOM_REPORTS_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - CUSTOM_REPORTS_ENABLED
    hostname: custom_reports
    depends_on:
      - redis
  #/custom_reports


  #definition_manager: (AppBuilder) A service to manage the definitions for a running AppBuilder platform.
  definition_manager:
    image: docker.io/digiserve/ab-definition-manager:$AB_DEFINITION_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - DEFINITION_MANAGER_ENABLE
    hostname: definition_manager
    depends_on:
      - redis
  #/definition_manager


  #file_processor: A service to manage uploaded files.
  file_processor:
    image: docker.io/digiserve/ab-file-processor:$AB_FILE_PROCESSOR_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - FILE_PROCESSOR_ENABLE
      # - FILE_PROCESSOR_PATH
      # - FILE_PROCESSOR_UPLOAD_DIR
      # - FILE_PROCESSOR_MAXBYTES
      # - CLAMAV_ENABLED
    hostname: file_processor
    volumes:
      - files:/data
      # - clamav:/var/lib/clamav
    depends_on:
      - redis
  #/file_processor


  #log_manager: (AppBuilder) A log manager for various AB operations
  log_manager:
    image: docker.io/digiserve/ab-log-manager:$AB_LOG_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - SENTRY_ENABLED
      - SENTRY_DSN
      - SENTRY_SAMPLE_RATE
      - SENTRY_SERVER_NAME
      # - SENTRY_CONFIG
    hostname: log_manager
    depends_on:
      - redis
  #/log_manager


  #notification_email: an smtp email service
  notification_email:
    image: docker.io/digiserve/ab-notification-email:$AB_NOTIFICATION_EMAIL_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - NOTIFICATION_EMAIL_ENABLE
      - NOTIFICATION_EMAIL_DEFAULT
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_SECURE
      # Default Auth Method is "login"
      # specify the user/password
      - SMTP_USER
      - SMTP_PASSWORD
      # For more complicated methods:
      # - SMTP_AUTH="{ login config }"
    hostname: notification_email
    depends_on:
      - redis
  #/notification_email


  #process_manager: (AppBuilder) a micro service to manage our process tasks
  process_manager:
    image: docker.io/digiserve/ab-process-manager:$AB_PROCESS_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
    hostname: process_manager
    depends_on:
      - redis
  #/process_manager


  #relay: (Appbuilder} A service to handle the communications with our relay server.
  relay:
    image: docker.io/digiserve/ab-relay:$AB_RELAY_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - RELAY_ENABLE
      - RELAY_SERVER_URL
      - RELAY_SERVER_TOKEN
      - RELAY_POLL_FREQUENCY
      - RELAY_MAX_PACKET_SIZE
      - PWA_URL
    hostname: relay
    depends_on:
      - redis
  #/relay


  #tenant_manager: (AppBuilder) A service to manage the site's tenants
  tenant_manager:
    image: docker.io/digiserve/ab-tenant-manager:$AB_TENANT_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - TENANT_MANAGER_ENABLE
      # - TENANT_MANAGER_TENANT_ID
    hostname: tenant_manager
    depends_on:
      - redis
  #/tenant_manager


  #user_manager: (AppBuilder) A microservice for managing Users
  user_manager:
    image: docker.io/digiserve/ab-user-manager:$AB_USER_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD
      # - MYSQL_HOST
      # - MYSQL_PORT
      # - MYSQL_USER
      # - MYSQL_DBPREFIX
      # - MYSQL_DBADMIN
      # - MYSQL_POOL_MAX
      # - MYSQL_POOL_ACQUIRE_TIMEOUT
      - USER_MANAGER_ENABLE
      - USER_MANAGER_MAX_FAILED_LOGINS
    hostname: user_manager
    depends_on:
      - redis
    # command: [ "node", "--inspect=0.0.0.0:9229", "app.js" ]
  #/user_manager
